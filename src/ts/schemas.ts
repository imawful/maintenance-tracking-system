// Generated by ts-to-zod
// minor touches to schemas to fit criteria.
// schemas constructed with form validation in mind.
import { z } from "zod";

const alphaNumeric: RegExp = /^[a-z0-9]+$/i;

//min(1) used to invalidate empty aka for REQUIRED.
const equipmentSchema = z.object({
  id: z.string(),
  name: z
    .string()
    .min(3, { message: "Name must be greater than 3 characters." }),
  location: z.string().min(1, { message: "Please enter a location." }),
  department: z.enum(["Machining", "Assembly", "Packaging", "Shipping"], {
    message: "Please select a department",
  }),
  model: z.string().min(1, { message: "Please enter a model." }),
  serialNumber: z.string().regex(alphaNumeric, {
    message: "Serial number must be a combination of letters and numbers.",
  }),
  installDate: z.coerce
    .date()
    .max(new Date(), { message: "Cannot be a future date." }),
  status: z.enum(["Operational", "Down", "Maintenance", "Retired"], {
    message: "Please select a status.",
  }),
});

const maintenanceRecordSchema = z.object({
  id: z.string(),
  equipmentId: z.string(),
  date: z.coerce.date().max(new Date(), { message: "Cannot be future date." }),
  type: z.enum(["Preventive", "Repair", "Emergency"], {
    message: "Please choose a maintenance type.",
  }),
  technician: z.string().min(2, { message: "Technician name is too short." }),
  hoursSpent: z.coerce
    .number()
    .min(1, { message: "Must be between 1-24" })
    .max(24, { message: "Must be between 1-24" }),
  description: z
    .string()
    .min(10, { message: "Enter a more descriptive description." }),
  partsReplaced: z
    .string()
    .min(1, { message: "Add name or remove part" })
    .array()
    .optional(),
  priority: z.enum(["Low", "Medium", "High"], {
    message: "Please select a priority.",
  }),
  completionStatus: z.enum(["Complete", "Incomplete", "Pending Parts"], {
    message: "Please select a completion status.",
  }),
});

export { equipmentSchema, maintenanceRecordSchema };
